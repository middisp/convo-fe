.userDetails.svelte-1v6aass{background:#fff;border:solid 1px var(--borderColor);border-radius:10px;margin-top:8em;padding:6em 1em 1em;position:relative}.passwordManagement.svelte-1v6aass{margin-top:2em}img.svelte-1v6aass{border-radius:50%;box-shadow:0 0 10px rgba(0, 0, 0, 0.5);margin:0 auto;left:50%;position:absolute;top:-100px;transform:translateX(-50%);max-width:200px}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
h1.svelte-l33yj5{margin-top:0}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */